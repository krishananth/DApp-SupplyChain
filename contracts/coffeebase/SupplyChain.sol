// "SPDX-License-Identifier: UNLICENSED"

pragma solidity ^0.8.0;

import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeecore/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, FarmerRole, DistributorRole, RetailerRole, ConsumerRole
{

  using SafeMath for uint256;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint private upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint private sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) public itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  function addFarmers(address[] memory newFarmers) public onlyOwner {
    for(uint i = 0; i < newFarmers.length; i ++) {
      addFarmer(newFarmers[i]);
    }
  }

  function addDistributors(address[] memory newDistributors) public onlyOwner {
    for(uint i = 0; i < newDistributors.length; i ++) {
      addDistributor(newDistributors[i]);
    }
  }   

  function addRetailers(address[] memory newRetailers) public onlyOwner {
    for(uint i = 0; i < newRetailers.length; i ++) {
      addRetailer(newRetailers[i]);
    }
  }     

  function addConsumers(address[] memory newConsumers) public onlyOwner {
    for(uint i = 0; i < newConsumers.length; i ++) {
      addConsumer(newConsumers[i]);
    }
  }     

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc, address buyer) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    address payable buyerAddressPayable = payable(buyer);
    buyerAddressPayable.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() payable {
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner()) {
      address payable ownerAddressPayable = payable(owner());
      selfdestruct(ownerAddressPayable);
    }
  }

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function harvestItem(uint _upc, address _originFarmerID, 
      string memory _originFarmName, string memory _originFarmInformation, 
      string memory _originFarmLatitude, string memory _originFarmLongitude, 
      string memory _productNotes) public

    // Ensure only Farmer can invoke this function
    onlyFarmer()
    {
      // Add the new item as part of Harvest
      Item memory newItem = Item(sku, _upc, msg.sender, _originFarmerID, 
          _originFarmName, _originFarmInformation, _originFarmLatitude, 
          _originFarmLongitude, sku + _upc, _productNotes, 0, State.Harvested, 
          address(0), address(0), address(0));

      items[_upc] = newItem;

      // Increment sku
      sku = sku + 1;

      // Emit the appropriate event
      emit Harvested(_upc);
    }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function processItem(uint _upc) public
     // Ensure only Farmer can invoke this function
    onlyFarmer()

    // Call modifier to check if upc has passed previous supply chain stage
    harvested(_upc)

    // Call modifier to verify caller of this function
    verifyCaller(msg.sender)
    {
      // require(farmers.isFarmer(msg.sender), "Caller must be of Role Farmer");

      // Update the appropriate fields
      items[_upc].itemState = State.Processed;
      
      // Emit the appropriate event
      emit Processed(_upc);
    }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _upc) public 
    // Ensure only Farmer can invoke this function
    onlyFarmer()

    // Call modifier to check if upc has passed previous supply chain stage
    processed(_upc)

    // Call modifier to verify caller of this function
    verifyCaller(msg.sender)
    {
      // Update the appropriate fields
      items[_upc].itemState = State.Packed;

      // Emit the appropriate event
      emit Packed(_upc);
    }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public 

    onlyFarmer()

    // Call modifier to check if upc has passed previous supply chain stage
    packed(_upc)
    
    // Call modifier to verify caller of this function
    verifyCaller(msg.sender)
    {
      // Update the appropriate fields
      items[_upc].itemState = State.ForSale;
      items[_upc].productPrice = _price;
    
      // Emit the appropriate event
      emit ForSale(_upc);
    }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable 

    // Ensure only Distributor Role can invoke this function
    onlyDistributor()

    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    
    // Call modifer to check if buyer has paid enough
    paidEnough(msg.value)

    // Call modifer to send any excess ether back to Distributor
    checkValue(_upc, msg.sender)
    {
      // Update the appropriate fields - ownerID, distributorID, itemState
      items[_upc].distributorID = msg.sender;
      items[_upc].itemState = State.Sold;
      items[_upc].ownerID = msg.sender;

      // Transfer money to farmer
      address payable farmerAddressPayable = payable(items[_upc].originFarmerID);
      farmerAddressPayable.transfer(items[_upc].productPrice);

      // emit the appropriate event
      emit Sold(_upc);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc) public 

    // Ensure only Distributor Role can invoke this function
    onlyDistributor()

    // Call modifier to check if upc has passed previous supply chain stage
    sold(_upc)

    // Call modifier to verify caller of this function
    verifyCaller(msg.sender)
    {
      // Update the appropriate fields
      items[_upc].itemState = State.Shipped;

      // Assume distributor sets productPrice 20% more than current price as profit/margin
      items[_upc].productPrice = items[_upc].productPrice.add(items[_upc].productPrice.div(5));

      // Emit the appropriate event
      emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) public 

    // Only Retailer can receive item
    onlyRetailer()

    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)

    // Access Control List enforced by calling Smart Contract / DApp
    verifyCaller(msg.sender)
    {
      // Update the appropriate fields - ownerID, retailerID, itemState
      items[_upc].ownerID = msg.sender;
      items[_upc].retailerID = msg.sender;
      items[_upc].itemState = State.Received;

      // Assume Retailer sets productPrice 10% more than current Product price (Distributor Price) as profit/margin
      items[_upc].productPrice = items[_upc].productPrice.add(items[_upc].productPrice.div(10));

      // Emit the appropriate event
      emit Received(_upc);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) payable public 

    // Only Consumer can purchase Item
    onlyConsumer()

    // Call modifier to check if upc has passed previous supply chain stage
    received(_upc)

    // Access Control List enforced by calling Smart Contract / DApp
    verifyCaller(msg.sender)

    // Check whether Consumer paid money which is > Retailer Price
    paidEnough(msg.value)

    // Call modifer to send any excess ether back to Consumer
    checkValue(_upc, msg.sender)    
    {
      // Update the appropriate fields - ownerID, consumerID, itemState
      items[_upc].ownerID = msg.sender;
      items[_upc].consumerID = msg.sender;
      items[_upc].itemState = State.Purchased;

      // Transfer money to Retailer
      address payable retailerAddressPayable = payable(items[_upc].retailerID);
      retailerAddressPayable.transfer(items[_upc].productPrice);

      // Emit the appropriate event
      emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
    (
    uint    itemSKU,
    uint    itemUPC,
    address ownerID,
    address originFarmerID,
    string memory originFarmName,
    string memory originFarmInformation,
    string memory originFarmLatitude,
    string memory originFarmLongitude
    ) 
  {
    // Assign values to the 8 parameters
    itemSKU = items[_upc].sku;
    itemUPC = _upc;
    ownerID = items[_upc].ownerID;
    originFarmerID = items[_upc].originFarmerID;
    originFarmName = items[_upc].originFarmName;
    originFarmInformation = items[_upc].originFarmInformation;
    originFarmLatitude = items[_upc].originFarmLatitude;
    originFarmLongitude = items[_upc].originFarmLongitude;

    return 
      (
      itemSKU,
      itemUPC,
      ownerID,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude
      );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
    (
    uint    itemSKU,
    uint    itemUPC,
    uint    productID,
    string memory productNotes,
    uint    productPrice,
    uint    itemState,
    address distributorID,
    address retailerID,
    address consumerID
    ) 
  {
    // Assign values to the 9 parameters
    itemSKU = items[_upc].sku;
    itemUPC = _upc;
    productID = items[_upc].productID;
    productNotes = items[_upc].productNotes;
    itemState = uint(items[_upc].itemState);
    retailerID = items[_upc].retailerID;
    consumerID = items[_upc].consumerID;
    productPrice = items[_upc].productPrice;
    distributorID = items[_upc].distributorID;
    
  return 
    (
    itemSKU,
    itemUPC,
    productID,
    productNotes,
    productPrice,
    itemState,
    distributorID,
    retailerID,
    consumerID
    );
  }
}
